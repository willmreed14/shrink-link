<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Shortener</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
          rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
          crossorigin="anonymous">
</head>

<body>
<div class="container">

    <h1>URL Shortener</h1>

    <!-- Authentication Controls -->
    <div id="authControls">
        <% if (!user) { %>
            <button id="signIn" class="btn btn-primary">Sign In</button>
        <% } else { %>
            <p id="welcomeMessage">Welcome, <strong><%= user.email %></strong>!</p>
        <% } %>
        <button id="signOut" class="btn btn-danger" style="display: none;">Sign Out</button>
    </div>

    <!-- Warning message for non-authenticated users -->
    <div id="authWarning" class="alert alert-warning">You must be signed in to shorten a URL.</div>

    <!-- URL Shortening Form -->
    <form id="shortenForm" class="my-4 d-flex">
        <label for="fullUrl" class="visually-hidden">Url</label>
        <input 
            required
            placeholder="Url" 
            type="url" 
            name="fullUrl" 
            id="fullUrl"
            class="form-control flex-grow-1 me-2">
        <button id="shrinkButton" class="btn btn-success" type="submit">Shrink</button>
    </form>

    <!-- Table to display shortened URLs -->
    <div class="table-responsive">
        <table class="table table-striped table-responsive text-nowrap">
            <thead>
                <tr>
                    <th>Full URL</th>
                    <th>Short URL</th>
                    <th>Clicks</th>
                </tr>
            </thead>
            <tbody>
                <% shortUrls.forEach(shortUrl => { %>
                <tr>
                    <td>
                        <a href="<%= shortUrl.full %>" target="_blank" rel="noopener noreferrer">
                            <%= shortUrl.full.length > 30 ? shortUrl.full.slice(0, 30) + '...' : shortUrl.full %>
                        </a>
                    </td>
                    <td>
                        <a href="/<%= shortUrl.short %>" target="_blank" rel="noopener noreferrer">
                            <%= shortUrl.short %>
                        </a>
                    </td>
                    <td><%= shortUrl.clicks %></td>
                </tr>
                <% }) %>
            </tbody>
        </table>
    </div>
</div> <!-- Close Container -->

<!-- JavaScript -->
<script type="module">
    import { userManager, signOutRedirect } from "/main.js";

    async function checkAuthStatus() {
        const user = await userManager.getUser();
        if (user) {
            console.log("‚úÖ User is signed in:", user);
            localStorage.setItem("access_token", user.access_token);
            localStorage.setItem("id_token", user.id_token);
            localStorage.setItem("user_email", user.profile.email);

            // ‚úÖ Fix: Ensure elements exist before modifying style properties
            const signInButton = document.getElementById("signIn");
            const authWarning = document.getElementById("authWarning");
            const signOutButton = document.getElementById("signOut");

            if (signInButton) signInButton.style.display = "none";
            if (authWarning) authWarning.style.display = "none";
            if (signOutButton) signOutButton.style.display = "block";

            document.getElementById("welcomeMessage").textContent = `Welcome, ${user.profile.email}!`;

            // ‚úÖ Fetch user's short URLs
            fetchUserShortUrls(user.access_token);
        }
    }

    async function fetchUserShortUrls(token) {
        try {
            const response = await fetch("/user/shortUrls", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error("Failed to fetch user URLs");
            }

            const userShortUrls = await response.json();
            console.log("‚úÖ Fetched user URLs:", userShortUrls);

            // ‚úÖ Populate table with user's URLs
            const tableBody = document.querySelector("tbody");
            tableBody.innerHTML = ""; // Clear existing rows

            userShortUrls.forEach(shortUrl => {
                const newRow = document.createElement("tr");
                newRow.innerHTML = `
                    <td><a href="${shortUrl.full}" target="_blank">${shortUrl.full.length > 30 ? shortUrl.full.slice(0, 30) + '...' : shortUrl.full}</a></td>
                    <td><a href="/${shortUrl.short}" target="_blank">${shortUrl.short}</a></td>
                    <td>${shortUrl.clicks}</td>
                `;
                tableBody.appendChild(newRow);
            });
        } catch (error) {
            console.error("‚ùå Error fetching user URLs:", error);
        }
    }

    // ‚úÖ Debugging: Check if the Sign-In button exists
    const signInButton = document.getElementById("signIn");
    console.log("üîç Checking Sign-In Button:", signInButton);

    if (signInButton) {
        signInButton.addEventListener("click", async () => {
            console.log("üîç Sign-In button clicked");
            await userManager.signinRedirect();
        });
    } else {
        console.error("‚ùå Sign-In Button NOT FOUND in the DOM");
    }

    // ‚úÖ Use AWS's provided sign-out logic
    const signOutButton = document.getElementById("signOut");
    if (signOutButton) {
        signOutButton.addEventListener("click", async () => {
            console.log("üîç Sign-Out button clicked");
            await signOutRedirect();
        });
    } else {
        console.error("‚ùå Sign-Out Button NOT FOUND in the DOM");
    }

    checkAuthStatus();
</script>



</body>
</html>
